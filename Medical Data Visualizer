import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("Medical Data Set//medical_examination.csv")

# Adding Overweight Column

df['overweight'] = (df['weight'] / ((df['height'] / 100) ** 2)).apply(lambda x : 1 if x > 25 else 0)

# Normalize the data by making 0 always good and 1 always bad. 
# If the value of cholesterol or gluc is 1, make the value 0. If the value is more than 1, make the value 1.
 
df['cholesterol'] = df['cholesterol'].apply(lambda x: 0 if x == 1 else 1)

df['gluc'] = df['gluc'].apply(lambda x: 0 if x == 1 else 1)

# Drawing Catplot

def drawing_cat_plot():
    
# Create a DataFrame for the cat plot using pd.melt with values from cholesterol, gluc, smoke, alco, active, and
# overweight in the df_cat variable.    
    cat_plot = pd.melt(df, id_vars = ['cardio'], value_vars = ['cholesterol', 'gluc', 'smoke', 'alco', 'active', 'overweight'])
    
    cat_plot['total'] = 1
    cat_plot = cat_plot.groupby(['cardio', 'variable', 'value'], as_index = False).count()
    
    sns.set_theme(style = 'darkgrid')
    
# Drawing the catplot with sns.catplot
    fig = sns.catplot(x = 'variable', y = 'total', data = cat_plot, hue = 'value', kind = 'bar', col = 'cardio').fig
    
    fig.savefig('catplot.png')
    return fig
drawing_cat_plot()


# drawing_heat_map

def drawing_heat_map():
    
    #cleaning data
    df_heat =df[
        (df['ap_lo'] <= df['ap_hi']) &
        (df['height'] >= df['height'].quantile(0.025)) &
        (df['height'] <= df['height'].quantile(0.975)) &
        (df['weight'] >= df['weight'].quantile(0.025)) &
        (df['weight'] <= df['weight'].quantile(0.975))
    ]
    # calculating the correlation matrix
    corr = df_heat.corr(method='pearson')
    
    # Generate a mask for the upper triangle
    mask = np.triu(corr)
    
    # set up the matplotlib figure
    fig, ax = plt.subplots(figsize = (12,12))
    
    # drwaing heat_map with sns.heatmap
    sns.heatmap(corr, linewidths = 1, annot =True, square = True, mask = mask, fmt = '.1f', center = 0.08, cbar_kws = {'shrink':0.5})

    fig.savefig('heatmap.png')
    return fig
drawing_heat_map()


